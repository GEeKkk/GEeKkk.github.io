<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>muduo on BiteByte</title>
    <link>https://geekkk.github.io/tags/muduo/</link>
    <description>Recent content in muduo on BiteByte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© PeakLu</copyright>
    <lastBuildDate>Sun, 21 Mar 2021 20:54:50 +0800</lastBuildDate><atom:link href="https://geekkk.github.io/tags/muduo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Muduo的Reactor模型</title>
      <link>https://geekkk.github.io/post/articles/muduo_reactor/</link>
      <pubDate>Sun, 21 Mar 2021 20:54:50 +0800</pubDate>
      
      <guid>https://geekkk.github.io/post/articles/muduo_reactor/</guid>
      <description>三大结构
 EventLoop Channel Poller  EventLoop 事件循环的主结构，主要是维护一个IO Multiplex，
EventLoop循环检测描述符上是否有事件发生，调用活跃fd的处理函数进行处理。
void EventLoop::loop() { assert(!looping_); assertInLoopThread(); looping_ = true; quit_ = false; while (!quit_) { activeChannels_.clear(); pollReturnTime_ = poller_-&amp;gt;poll(kPollTimeMs, &amp;amp;activeChannels_); for (ChannelList::iterator it = activeChannels_.begin(); it != activeChannels_.end(); ++it) { (*it)-&amp;gt;handleEvent(); } } LOG_TRACE &amp;lt;&amp;lt; &amp;#34;EventLoop &amp;#34; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; &amp;#34; stop looping&amp;#34;; looping_ = false; } Channel Channel负责管理该fd，fd及其一系列处理函数都注册在该Channel类。
class Channel { private: void update(); static const int kNoneEvent; static const int kReadEvent; static const int kWriteEvent; EventLoop* loop_; // 事件循环  const int fd_; int events_; int revents_; int index_; // used by Poller.</description>
    </item>
    
  </channel>
</rss>
